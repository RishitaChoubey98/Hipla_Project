{"version":3,"sources":["pages/dashboard/report/breachTrend.js"],"names":["BreachTrend","getTrends","cat","data","state","showDays","format","Date","addDays","Intl","DateTimeFormat","resolvedOptions","timeZone","postAuth","then","res","request","status","map","trent","i","parseInt","unshift","setState","isLoading","this","console","log","className","onChange","e","target","value","width","height","chartType","loader","options","hAxis","title","vAxis","series","1","curveType","rootProps","Component"],"mappings":"sNAIMA,E,kDACF,aAAe,IAAD,8BACV,gBAqBJC,UAAY,SAACC,GACT,IAAIC,EAAO,GAEX,OAAQ,EAAKC,MAAMC,UACf,IAAK,IACDF,EAAO,CACH,SAAYG,kBAAO,IAAIC,KAAQ,cAC/B,OAAUD,kBAAOE,kBAAQ,IAAID,KAAQ,GAAI,cACzC,SAAW,EACX,SAAYE,KAAKC,iBAAiBC,kBAAkBC,UAExD,MACJ,IAAK,IACDT,EAAO,CACH,SAAYG,kBAAOE,kBAAQ,IAAID,MAAS,GAAI,cAC5C,OAAUD,kBAAOE,kBAAQ,IAAID,KAAQ,GAAI,cACzC,SAAW,EACX,SAAYE,KAAKC,iBAAiBC,kBAAkBC,UAExD,MACJ,IAAK,KACDT,EAAO,CACH,SAAYG,kBAAOE,kBAAQ,IAAID,MAAS,IAAK,cAC7C,OAAUD,kBAAOE,kBAAQ,IAAID,KAAQ,GAAI,cACzC,SAAW,EACX,SAAYE,KAAKC,iBAAiBC,kBAAkBC,UAMhEC,YAAS,qBAAsBV,GAC1BW,MAAK,SAACC,GAGY,MADAA,EAAIC,QAAQC,SAEvBF,EAAIZ,KAAKA,KAAKe,KAAI,SAACC,EAAOC,GAEtBD,EAAM,GAAKE,SAASF,EAAM,IAC1BA,EAAM,GAAKA,EAAM,GAAG,SAGxBJ,EAAIZ,KAAKA,KAAKmB,QAAQ,CAAC,OAAQ,uBAE/B,EAAKC,SAAS,CACVpB,KAAMY,EAAIZ,KAAKA,KACfqB,WAAW,SAlE3B,EAAKpB,MAAQ,CACTD,KAAM,CACF,CAAC,OAAQ,sBACT,CAAC,QAAS,IAEdE,SAAU,IACVmB,WAAW,GARL,E,gEAmBVC,KAAKxB,YACLyB,QAAQC,IAAIlB,KAAKC,iBAAiBC,kBAAkBC,SAAU,sD,+BAqDxD,IAAD,OACL,OACI,yBAAKgB,UAAU,aACX,yBAAKA,UAAU,mBACX,4CACA,yBAAKA,UAAU,iBAKX,4BAAQC,SAAU,SAACC,GAAQ,EAAKP,SAAS,CAAElB,SAAUyB,EAAEC,OAAOC,QAAS,WAAQ,EAAK/B,iBAChF,4BAAQ+B,MAAO,GAAf,SACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,IAAf,cAKZ,yBAAKJ,UAAU,iBACX,kBAAC,IAAD,CACIK,MAAO,QACPC,OAAQ,QACRN,UAAU,eACVO,UAAU,YACVC,OAAQ,8CACRjC,KAAMsB,KAAKrB,MAAMD,KACjBkC,QAAS,CACLC,MAAO,CACHC,MAAO,QAEXC,MAAO,CACHD,MAAO,sBAEXE,OAAQ,CACJC,EAAG,CAAEC,UAAW,cAGxBC,UAAW,CAAE,cAAe,a,GA/G1BC,aAuHX7C","file":"static/js/8.775530f7.chunk.js","sourcesContent":["import React, { Component } from 'reactn';\r\nimport Chart from \"react-google-charts\";\r\nimport { addDays, format } from 'date-fns';\r\nimport { postAuth } from '../../../util/Service';\r\nclass BreachTrend extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: [\r\n                ['Time', 'Number of breaches'],\r\n                ['10 am', 0]\r\n            ],\r\n            showDays: '1',\r\n            isLoading: false\r\n        }\r\n\r\n        // ['Time', 'Number of breaches'],['10 am', 0],\r\n        //         ['11 am', 10],\r\n        //         ['12 pm', 23],\r\n        //         ['1 pm', 17],\r\n        //         ['2 pm', 18],\r\n        //         ['3 pm', 9]\r\n    }\r\n    componentDidMount(){\r\n        this.getTrends()\r\n        console.log(Intl.DateTimeFormat().resolvedOptions().timeZone, 'current time zone ================== >>>>>>>>>>>');\r\n    }\r\n    getTrends = (cat) => {\r\n        let data = {}\r\n\r\n        switch (this.state.showDays) {\r\n            case '1':\r\n                data = {\r\n                    \"fromDate\": format(new Date(), 'yyyy-MM-dd'),\r\n                    \"toDate\": format(addDays(new Date(), 1), 'yyyy-MM-dd'),\r\n                    \"isToday\": true,\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                }\r\n                break;\r\n            case '7':\r\n                data = {\r\n                    \"fromDate\": format(addDays(new Date(), -6), 'yyyy-MM-dd'),\r\n                    \"toDate\": format(addDays(new Date(), 1), 'yyyy-MM-dd'),\r\n                    \"isToday\": false,\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                }\r\n                break;\r\n            case '14':\r\n                data = {\r\n                    \"fromDate\": format(addDays(new Date(), -13), 'yyyy-MM-dd'),\r\n                    \"toDate\": format(addDays(new Date(), 1), 'yyyy-MM-dd'),\r\n                    \"isToday\": false,\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                }\r\n                break;\r\n        }\r\n\r\n\r\n        postAuth('/api/breach/trends', data)\r\n            .then((res) => {\r\n                // console.log(res);\r\n                const status = res.request.status;\r\n                if (status === 200) {\r\n                    res.data.data.map((trent, i) => {\r\n                        // console.log(trent[1])\r\n                        trent[1] = parseInt(trent[1])\r\n                        trent[0] = trent[0]+':00'\r\n                        return \r\n                    })\r\n                    res.data.data.unshift(['Time', 'Number of breaches'])\r\n                    // console.log(res.data.data)\r\n                    this.setState({\r\n                        data: res.data.data,\r\n                        isLoading: false\r\n                    })\r\n                }\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"graph-box\">\r\n                <div className=\"topgraphheading\">\r\n                    <h3>Breach Trend</h3>\r\n                    <div className=\"exportdataprt\">\r\n                        {/* <span>\r\n                            <i className=\"fa fa-long-arrow-down\"></i>\r\n                            Export data\r\n                        </span> */}\r\n                        <select onChange={(e) => { this.setState({ showDays: e.target.value }, () => { this.getTrends() }) }}>\r\n                            <option value={1}>Today</option>\r\n                            <option value={7}>7 days</option>\r\n                            <option value={14}>14 days</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                {/* <img src={`${process.env.PUBLIC_URL}/assets/images/graphimg3.png`} /> */}\r\n                <div className=\"grapContainer\">\r\n                    <Chart\r\n                        width={'600px'}\r\n                        height={'400px'}\r\n                        className=\"breach-trend\"\r\n                        chartType=\"LineChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={this.state.data}\r\n                        options={{\r\n                            hAxis: {\r\n                                title: 'Time',\r\n                            },\r\n                            vAxis: {\r\n                                title: 'Number of breaches',\r\n                            },\r\n                            series: {\r\n                                1: { curveType: 'function' },\r\n                            },\r\n                        }}\r\n                        rootProps={{ 'data-testid': '2' }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BreachTrend;\r\n"],"sourceRoot":""}